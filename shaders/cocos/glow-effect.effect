/**
  Shader: Glow Effect
    A simple glow effect shader. There is a "spriteScale" property if the glow gets cut off because of the
  canvas size. You can then use the node scale in the scene to compensate and maintain the sprite in its original size.
    The formula to restore you sprite to original size is the following: 
      `node.scale = 1 / spriteScale`
    Example, if in the material you used 0.8 as "spriteScale" property, you will calculate:
      `1 / 0.8` which will result in `1.25`
    So, your node scale should be 1.25 in the scene.

   You can also animate the shader properties using a tween, like so:
   ```
    public get glowIntensity(): number {
      return +this.sprite.getMaterial(0).getProperty('glowIntensity', 0);
    }

    public set glowIntensity(v: number) {
      this.sprite.getMaterial(0).setProperty('glowIntensity', v, 0);
    }

    protected onLoad(): void {
      this.glowIntensity = 0;
      const glowTween = cc.tween(this).to(2, { glowIntensity: 4.0 }).to(2, { glowIntensity: 0.0 });
      cc.tween(this).repeatForever(glowTween).start();
    }
  ```
*/

CCEffect %{
  techniques:
  - passes:
    - vert: vertex
      frag: frag
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: "white" }
        glowColor: { value: [1, 1, 1, 1], editor: { type: "color" } }
        glowSize: { value: 0.5 }
        glowIntensity: { value: 1.0 }
        glowThreshold: { value: 0.5 }
        spriteScale: { value: 1.0 }
}%

// Default Cocos vertex shader
CCProgram vertex %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);;

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram frag %{
  precision highp float;
  
  #include <cc-global>
  #include <texture>
  #include <alpha-test>

  in vec4 v_color;

  uniform Constant{
    vec4 glowColor;
    float glowSize;
    float glowIntensity;
    float glowThreshold;
    float spriteScale;
  };

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  float alphaFromTexture(sampler2D tex, vec2 uv) {
    vec4 temp = vec4(1.0);
    CCTexture(texture, uv, temp);
    return temp.a;
  }

  vec2 scaleUV(vec2 uv, float scale) {
    float invertedScale = 1.0 / scale;
    vec2 offset = vec2(0.5 * (invertedScale - 1.0));
    return uv * vec2(invertedScale) - offset;
  }

  void main () {
    vec4 color = vec4(1.0);

    #if USE_TEXTURE
    vec2 scaledUV = scaleUV(v_uv0, spriteScale);
    CCTexture(texture, scaledUV, color);

    if (color.a <= glowThreshold) {
      float sum = 0.0;
      for (float n = 0.0; n < 9.0; ++n) {
        float offset = 0.05 * glowSize;
        float y = scaledUV.y - ((n - 4.5) * offset);
        float h_sum = 0.0;
        h_sum += alphaFromTexture(texture, vec2(scaledUV.x - (4.0 * offset), y));
        h_sum += alphaFromTexture(texture, vec2(scaledUV.x - (3.0 * offset), y));
        h_sum += alphaFromTexture(texture, vec2(scaledUV.x - (2.0 * offset), y));
        h_sum += alphaFromTexture(texture, vec2(scaledUV.x - offset, y));
        h_sum += alphaFromTexture(texture, vec2(scaledUV.x, y));
        h_sum += alphaFromTexture(texture, vec2(scaledUV.x + offset, y));
        h_sum += alphaFromTexture(texture, vec2(scaledUV.x + (2.0 * offset), y));
        h_sum += alphaFromTexture(texture, vec2(scaledUV.x + (3.0 * offset), y));
        h_sum += alphaFromTexture(texture, vec2(scaledUV.x + (4.0 * offset), y));
        sum += h_sum / 9.0;
      }
      
      float glowAlpha = (sum / 9.0) * glowIntensity;
      vec4 maintain = vec4(vec3(color.rgb), color.a);
      color = maintain + vec4(glowColor.rgb * (1.0 - color.a), glowAlpha);
    }
    #endif

    gl_FragColor = color;
  }
}%
